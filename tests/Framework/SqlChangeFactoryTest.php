<?php namespace DschoenbauerTest\SqlControl\Framework;

use Dschoenbauer\SqlControl\Framework\SqlChange;
use Dschoenbauer\SqlControl\Framework\SqlChangeFactory;
use Dschoenbauer\SqlControl\Parser\ParseInterface;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-13 at 17:49:27.
 */
class SqlChangeFactoryTest extends PHPUnit_Framework_TestCase
{

    const RESULT_VERSION = '0.0.0';
    const RESULT_GROUP = 'group';
    const RESULT_SQL = ['test', 'test2'];

    /**
     * @var SqlChangeFactory
     */
    protected $object;

    protected function setUp()
    {
        $version = $this->getMockParser(self::RESULT_VERSION);
        $group = $this->getMockParser(self::RESULT_GROUP);
        $sql = $this->getMockParser(self::RESULT_SQL);
        $this->object = new SqlChangeFactory($version, $group, $sql);
    }

    protected function tearDown()
    {
        
    }

    public function testGetSqlChange()
    {
        $object = $this->object->getSqlChange('name', 'path');
        $this->assertInstanceOf(SqlChange::class, $object);
        $this->assertEquals('name', $object->getName());
        $this->assertEquals('pathname', $object->getFullPath());
        $this->assertEquals(self::RESULT_GROUP, $object->getGroup());
        $this->assertEquals(self::RESULT_VERSION, $object->getVersion());
        $this->assertEquals(self::RESULT_SQL, $object->getStatements());
    }

    public function testGetVersionParser()
    {
        $this->assertEquals(self::RESULT_VERSION, $this->object->getVersionParser()->Parse($this->getMockSqlChange()));
    }

    public function testGetGroupParser()
    {
        $this->assertEquals(self::RESULT_GROUP, $this->object->getGroupParser()->Parse($this->getMockSqlChange()));
    }

    public function testGetSqlParser()
    {
        $this->assertEquals(self::RESULT_SQL, $this->object->getSqlParser()->Parse($this->getMockSqlChange()));
    }

    public function testSetVersionParser()
    {
        $parser = $this->getMockParser(self::RESULT_VERSION);
        $this->assertEquals($parser, $this->object->setVersionParser($parser)->getVersionParser());
    }

    public function testSetGroupParser()
    {
        $parser = $this->getMockParser(self::RESULT_GROUP);
        $this->assertEquals($parser, $this->object->setGroupParser($parser)->getGroupParser());
    }

    public function testSetSqlParser()
    {
        $parser = $this->getMockParser(self::RESULT_SQL);
        $this->assertEquals($parser, $this->object->setSqlParser($parser)->getSqlParser());
    }

    protected function getMockParser($result)
    {
        $mock = $this->getMockBuilder(ParseInterface::class)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->getMock();
        $mock->method('parse')->willReturn($result);
        return $mock;
    }

    protected function getMockSqlChange()
    {
        $mock = $this->getMockBuilder(SqlChange::class)
            ->disableOriginalConstructor()
            ->getMock();
        return $mock;
    }
}
