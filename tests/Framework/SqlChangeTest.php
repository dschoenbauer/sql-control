<?php namespace CtimtTest\SqlControl\Framework;

use Ctimt\SqlControl\Framework\Attributes;
use Ctimt\SqlControl\Framework\SqlChange;
use Ctimt\SqlControl\Status\StatusInterface;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-13 at 17:49:28.
 */
class SqlChangeTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var SqlChange
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SqlChange();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testGroup()
    {
        $this->assertEquals('group', $this->object->setGroup('group')->getGroup());
    }

    public function testVersion()
    {
        $this->assertEquals('0.0.0', $this->object->setVersion('0.0.0')->getVersion());
    }

    public function testStatements()
    {
        $val = ['test', 'test2'];
        $this->assertEquals($val, $this->object->setStatements($val)->getStatements());
    }

    public function testAttributes()
    {
        $this->assertInstanceOf(Attributes::class, $this->object->getAttributes());
    }

    public function testName()
    {
        $this->assertEquals('name', $this->object->setName('name')->getName());
    }

    public function testFullPath()
    {
        $this->assertEquals('path', $this->object->setFullPath('path')->getFullPath());
    }

    public function testStatus()
    {
        $mock = $this->getMockBuilder(StatusInterface::class)
            ->disableOriginalConstructor()
            ->disableOriginalClone()
            ->disableArgumentCloning()
            ->disallowMockingUnknownTypes()
            ->getMock();

        $this->assertTrue($this->object->setStatus($mock)->getStatus() instanceof StatusInterface);
    }
}
