<?php namespace Ctimt\SqlControl\Framework;

use Ctimt\SqlControl\Framework\Attributes;
use Ctimt\SqlControl\Framework\SqlControlManager;
use Ctimt\SqlControl\Visitor\VisitorInterface;
use CtimtTest\SqlControl\Mocks\MockPdo;
use PDO;
use PHPUnit_Framework_Assert;
use PHPUnit_Framework_TestCase;
use Zend\EventManager\EventManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-13 at 17:49:28.
 */
class SqlControlManagerTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var SqlControlManager
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SqlControlManager();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testGetAttributes()
    {
        $this->assertInstanceOf(Attributes::class, $this->object->getAttributes());
    }

    public function testAccept()
    {
        $mock = $this->getMockBuilder(VisitorInterface::class)->getMock();
        $mock->expects($this->once())
            ->method('visitSqlControlManager')
            ->will($this->returnCallback(function($object) {
                    PHPUnit_Framework_Assert::assertEquals($this->object, $object);
                }));
        $this->object->accept($mock);
    }

    public function testAdapter()
    {
        $this->assertInstanceOf(PDO::class, $this->object->setAdapter(new MockPdo())->getAdapter());
    }

    public function testEventManager(){
        $this->assertInstanceOf(EventManager::class, $this->object->getEventManager());
    }
    
    public function testUpdate()
    {
        $mock = $this->getMockBuilder(EventManager::class)
                ->getMock();
        $mock->expects($this->exactly(3))
                ->method('trigger');
        $this->object->setEventManager($mock);
        $this->object->update();
    }
}
