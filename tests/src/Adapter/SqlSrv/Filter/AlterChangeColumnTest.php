<?php

namespace Ctimt\SqlControl\Adapter\SqlSrv\Filter;

use Ctimt\SqlControl\Framework\SqlChange;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-19 at 18:02:57.
 */
class AlterChangeColumnTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AlterChangeColumn
     */
    protected $object;

    protected function setUp() {
        $this->object = new AlterChangeColumn();
        $this->object->setSqlChange(new SqlChange());
    }

    public function testFilterAlter() {
        $actual = "ALTER TABLE Product CHANGE product_maxContentLifeCycle product_maxContentLifeCycle INT(10) NOT NULL";
        $expected = "ALTER TABLE Product ALTER COLUMN product_maxContentLifeCycle INT(10) NOT NULL";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
    }
    
    public function testFilterRename(){
        $actual = "ALTER TABLE Product CHANGE product_maxContentLifeCycle product_maxDaysBeforeEvent INT(10) NOT NULL";
        $expected = $this->getRenameStatement('Product', 'product_maxContentLifeCycle', 'product_maxDaysBeforeEvent');
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[1]);
    }
    
    public function testFilterDefaultRemoved(){
        $actual = "ALTER TABLE Product CHANGE product_maxContentLifeCycle product_maxContentLifeCycle INT(10) DEFAULT 0 NOT NULL";
        $expected = "ALTER TABLE Product ALTER COLUMN product_maxContentLifeCycle INT(10) NOT NULL";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
    }
    
    public function testFilterDefaultStatement(){
        $actual = "ALTER TABLE Product CHANGE product_maxContentLifeCycle product_maxContentLifeCycle INT(10) DEFAULT 0 NOT NULL";
        $expected = $this->getDefaultStatement('Product', 'product_maxContentLifeCycle', 0);
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[1]);
    }
    
    public function testFilterCheckIntegration(){
        $actual = "ALTER TABLE Product CHANGE product_maxContentLifeCycle product_maxContentCycle INT(10) DEFAULT 0 NOT NULL";
        $expected = "ALTER TABLE Product ALTER COLUMN product_maxContentLifeCycle INT(10) NOT NULL";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
        $this->assertEquals($this->getDefaultStatement('Product', 'product_maxContentLifeCycle', 0), $this->object->getSqlChange()->getStatements()[1]);
        $this->assertEquals($this->getRenameStatement('Product', 'product_maxContentLifeCycle', 'product_maxContentCycle'), $this->object->getSqlChange()->getStatements()[2]);
    }
    
    public function testFilterOddSpacing(){
        $actual = "ALTER TABLE Product 
 
CHANGE product_maxContentLifeCycle product_maxDaysBeforeEvent int  DEFAULT 0 NOT NULL, ";
        $expected = "ALTER TABLE Product ALTER COLUMN product_maxContentLifeCycle int NOT NULL";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
        $this->assertEquals($this->getDefaultStatement('Product', 'product_maxContentLifeCycle', 0), $this->object->getSqlChange()->getStatements()[1]);
        $this->assertEquals($this->getRenameStatement('Product', 'product_maxContentLifeCycle', 'product_maxDaysBeforeEvent'), $this->object->getSqlChange()->getStatements()[2]);
    }

    public function testFilterAfterTagged(){
        $actual = "ALTER TABLE Venue 
	CHANGE venue_name venue_name varchar(200)  NULL after venue_id";
        $expected = "ALTER TABLE Venue ALTER COLUMN venue_name varchar(200) NULL";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
    }

    public function testFilterParenthesis(){
        $actual = "ALTER TABLE oauth_access_tokens CHANGE expires expires DATETIME DEFAULT(GETDATE())";
        $expected = "ALTER TABLE oauth_access_tokens ALTER COLUMN expires DATETIME ";
        $this->assertEquals(AlterChangeColumn::SUCCESS_STATENT, $this->object->filter($actual));
        $this->assertEquals($expected, $this->object->getSqlChange()->getStatements()[0]);
    }

    public function getRenameStatement($table, $originalField, $newField){
        return "sp_rename '$table.$originalField', '$newField', 'COLUMN'";;
    }

    public function getDefaultStatement($table, $field, $value) {
        return "DECLARE @Command nvarchar(max), @ConstaintName nvarchar(max), @TableName nvarchar(max),@ColumnName nvarchar(max)
SET @TableName = '$table'
SET @ColumnName ='$field'
SELECT @ConstaintName = name
    FROM sys.default_constraints
    WHERE parent_object_id = object_id(@TableName)
        AND parent_column_id = columnproperty(object_id(@TableName), @ColumnName, 'ColumnId')
SELECT @Command = 'ALTER TABLE '+@TableName+' drop constraint '+ @ConstaintName
IF @Command IS NOT NULL
BEGIN
    EXECUTE sp_executeSQL @Command
    SELECT @Command = 'ALTER TABLE '+@TableName+' ADD CONSTRAINT '+@ConstaintName+' DEFAULT $value FOR ' + @ColumnName
    EXECUTE sp_executeSQL @Command
END";
    }

}
