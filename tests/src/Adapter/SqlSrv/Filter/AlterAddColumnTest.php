<?php

namespace Ctimt\SqlControl\Adapter\SqlSrv\Filter;

use Ctimt\SqlControl\Framework\SqlChange;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-19 at 18:02:55.
 */
class AlterAddColumnTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AlterAddColumn
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $stub = new SqlChange();

        $this->object = new AlterAddColumn();
        $this->object->setSqlChange($stub);
    }

    public function testFilter2Columns() {
        $sql = "ALTER TABLE Customer 
            ADD COLUMN customer_organizationName VARCHAR(45) NULL AFTER distributor_id, 
            ADD COLUMN customer_postalCode VARCHAR(10) NULL AFTER customer_organizationName;";
        $results = [
            'ALTER TABLE Customer ADD customer_organizationName VARCHAR(45) NULL',
            'ALTER TABLE Customer ADD customer_postalCode VARCHAR(10) NULL'
        ];
        $this->assertEquals(AlterAddColumn::SUCCESS_STATENT, $this->object->filter($sql));
        $this->assertEquals(2, count($this->object->getSqlChange()->getStatements()));
        $this->assertEquals($results, $this->object->getSqlChange()->getStatements());
    }

    public function testFilterMoreColumns() {
        $sql = "ALTER TABLE Customer   
            ADD COLUMN customer_address1 VARCHAR(45) NULL AFTER customer_enrollDate,
            ADD COLUMN customer_address2 VARCHAR(45) NULL AFTER customer_address1,
            ADD COLUMN customer_city VARCHAR(45) NULL AFTER customer_address2,
            ADD COLUMN state_id INT(10) NULL AFTER customer_city,
            ADD COLUMN country_id INT(10) NULL AFTER state_id,
            ADD COLUMN customerStatus_id INT(10) UNSIGNED NOT NULL AFTER country_id;";
        $results = [
            'ALTER TABLE Customer ADD customer_address1 VARCHAR(45) NULL',
            'ALTER TABLE Customer ADD customer_address2 VARCHAR(45) NULL',
            'ALTER TABLE Customer ADD customer_city VARCHAR(45) NULL',
            'ALTER TABLE Customer ADD state_id INT(10) NULL',
            'ALTER TABLE Customer ADD country_id INT(10) NULL',
            'ALTER TABLE Customer ADD customerStatus_id INT(10) UNSIGNED NOT NULL',
        ];
        $this->assertEquals(AlterAddColumn::SUCCESS_STATENT, $this->object->filter($sql));
        $this->assertEquals(count($results), count($this->object->getSqlChange()->getStatements()));
        $this->assertEquals($results, $this->object->getSqlChange()->getStatements());
    }


    public function testFilterGood() {
        $result = 'ALTER TABLE Customer ADD customer_address1 VARCHAR(45) NULL';
        $this->assertEquals($result, $this->object->filter($result));
    }

    public function testFilterWithParenthesis() {
        $original = "ALTER TABLE Container ADD COLUMN container_created DATETIME DEFAULT(GETDATE()) AFTER container_deleted";
        $results = "ALTER TABLE Container ADD container_created DATETIME DEFAULT(GETDATE())";
        $this->assertEquals(AlterAddColumn::SUCCESS_STATENT, $this->object->filter($original));
        $this->assertEquals($results, $this->object->getSqlChange()->getStatement(0));
    }
    
    public function testFilterWithDots() {
        $original = "ALTER TABLE Product ADD COLUMN product_priceToDistributor FLOAT DEFAULT 0.00 NULL AFTER product_maxSpeakers";
        $results = "ALTER TABLE Product ADD product_priceToDistributor FLOAT DEFAULT 0.00 NULL";
        $this->assertEquals(AlterAddColumn::SUCCESS_STATENT, $this->object->filter($original));
        $this->assertEquals($results, $this->object->getSqlChange()->getStatement(0));
    }

}
