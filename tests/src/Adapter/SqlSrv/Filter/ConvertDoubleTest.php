<?php

namespace Ctimt\SqlControl\Adapter\SqlSrv\Filter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-19 at 18:03:00.
 */
class ConvertDoubleTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ConvertDouble
     */
    protected $object;

    protected function setUp() {
        $this->object = new ConvertDouble;
    }

   
    public function testFilter() {
        $actual = "ALTER TABLE `Product` 
ADD COLUMN `product_maxActiveEvents` INT(10) DEFAULT 0 NULL AFTER `product_maxEvents`, 
CHANGE `product_maxContentLifeCycle` `product_maxDaysBeforeEvent` INT(10) UNSIGNED DEFAULT 0 NOT NULL, 
ADD COLUMN `product_maxDaysAfterEvent` INT(10) DEFAULT 0 NULL AFTER `product_maxDaysBeforeEvent`, 
CHANGE `product_msrp` `product_suggestedRetailPrice` DOUBLE(8,2) UNSIGNED DEFAULT 0.00 NULL, 
ADD COLUMN `product_maxSpeakers` INT(10) DEFAULT 0 NULL AFTER `distributor_id`, 
ADD COLUMN `product_priceToDistributor` DOUBLE(10,2) DEFAULT 0.00 NULL AFTER `product_maxSpeakers`, 
ADD COLUMN `product_currencyPriceToDistrib` DOUBLE(10,2) DEFAULT 0.00 NULL AFTER `product_priceToDistributor`, 
ADD COLUMN `product_billingFrequency` ENUM('o','m','y') NULL AFTER `product_CurrencyPriceToDistrib`; 
";
        $expected = "ALTER TABLE `Product` 
ADD COLUMN `product_maxActiveEvents` INT(10) DEFAULT 0 NULL AFTER `product_maxEvents`, 
CHANGE `product_maxContentLifeCycle` `product_maxDaysBeforeEvent` INT(10) UNSIGNED DEFAULT 0 NOT NULL, 
ADD COLUMN `product_maxDaysAfterEvent` INT(10) DEFAULT 0 NULL AFTER `product_maxDaysBeforeEvent`, 
CHANGE `product_msrp` `product_suggestedRetailPrice` FLOAT UNSIGNED DEFAULT 0.00 NULL, 
ADD COLUMN `product_maxSpeakers` INT(10) DEFAULT 0 NULL AFTER `distributor_id`, 
ADD COLUMN `product_priceToDistributor` FLOAT DEFAULT 0.00 NULL AFTER `product_maxSpeakers`, 
ADD COLUMN `product_currencyPriceToDistrib` FLOAT DEFAULT 0.00 NULL AFTER `product_priceToDistributor`, 
ADD COLUMN `product_billingFrequency` ENUM('o','m','y') NULL AFTER `product_CurrencyPriceToDistrib`; 
";
        $this->assertEquals($expected,$this->object->filter($actual));
    }

}
