<?php

namespace Ctimt\SqlControl\Adapter\SqlSrv\Filter;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-19 at 18:02:50.
 */
class InsertIdentityTest extends PHPUnit_Framework_TestCase {

    /**
     * @var InsertIdentity
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new InsertIdentity;
    }

    public function testFilterWithIdInsert() {
        $sql = "insert into test (test_id,test_name)values(1,'name')";
        $expected = "SET IDENTITY_INSERT dbo.[test] ON;insert into test (test_id,test_name)values(1,'name');SET IDENTITY_INSERT dbo.[test] OFF;";
        $this->assertEquals($expected,$this->object->filter($sql));
    }
    
    public function testFilterWithOutUnderScoreIdInsert() {
        $sql = "insert into test (testid,test_name)values(1,'name')";
        $expected = "SET IDENTITY_INSERT dbo.[test] ON;insert into test (testid,test_name)values(1,'name');SET IDENTITY_INSERT dbo.[test] OFF;";
        $this->assertEquals($expected,$this->object->filter($sql));
    }
    
    public function testFilterWithIdRawInsert() {
        $sql = "insert into test (id,test_name)values(1,'name')";
        $expected = "SET IDENTITY_INSERT dbo.[test] ON;insert into test (id,test_name)values(1,'name');SET IDENTITY_INSERT dbo.[test] OFF;";
        $this->assertEquals($expected,$this->object->filter($sql));
    }
    
    public function testFilterWithNoId() {
        $sql = "insert into test (test_name)values('name')";
        $this->assertEquals($sql,$this->object->filter($sql));
    }


    public function testSqlChange() {
        $SqlChange = $this->getMockBuilder(\Ctimt\SqlControl\Framework\SqlChange::class)
                ->getMock();
        $this->assertEquals($SqlChange,$this->object->setSqlChange($SqlChange)->getSqlChange());
    }


}
